plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'io.openapiprocessor.openapi-processor' version '2022.1'
	id 'io.freefair.lombok' version '6.4.2'
	id 'jacoco'
	id 'org.sonarqube' version '3.3'
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(17))
	}
}

jar {
	manifest {
		attributes(
				'Main-Class': 'com.verint.tasksapi.TasksApiApplication'
		)
	}
}

group = 'com.verint.wfm'
version = '0.0.1-SNAPSHOT'
repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.mapstruct:mapstruct:1.4.2.Final'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql:42.3.4'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mapstruct:mapstruct:1.4.2.Final'
}

sourceSets {
	main {
		java {
			srcDirs "$projectDir/build/openapi"
		}
	}
}

compileJava.dependsOn('processSpring')

compileJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring',
	]
}

openapiProcessor {
	spring {
		processor 'io.openapiprocessor:openapi-processor-spring:2022.3'
		apiPath "$projectDir/src/main/resources/tasks-openapi.yaml"
		targetDir "$projectDir/build/openapi"
		mapping "$projectDir/src/main/resources/mapping.yaml"
		showWarnings true
	}
}

jacoco {
	toolVersion = "0.8.7"
}

sonarqube {
	properties {
		property "sonar.projectKey", "jamesmmbrown_tasks-api"
		property 'sonar.projectName', 'tasks-api'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.sources', 'src/main/java'
		property 'sonar.tests', 'src/test/java'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test'
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
		html.destination file("${buildDir}/reports/jacoco/test/html")
	}
}

jacocoTestCoverageVerification {
	violationRules {}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}